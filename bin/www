#!/usr/bin/env node

'use strict';
/**
 * Module dependencies.
 */
let app = require('../app');
const http = require('http');
const logger = require('../logger');

/**
 * Get port from environment and store in Express.
 */
let port = process.env.PORT || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

    logger.info(`Listening on port ${bind}`);
    logger.info(`NODE_ENV: ${process.env.NODE_ENV}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server
    .listen(port)
    .on('error', onError)
    .on('listening', onListening);
